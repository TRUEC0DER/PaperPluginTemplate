import xyz.jpenilla.runtask.task.AbstractRun
import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'xyz.jpenilla.run-paper' version '2.3.1'
    id "com.modrinth.minotaur" version '2.+'
}

group = 'me.truec0der'

String pluginName = readPluginProperty("plugin.name", "PaperPluginTemplate") as String
String pluginVersion = readPluginProperty("plugin.version", "1.0.0") as String
String pluginApiVersion = readPluginProperty("plugin.api_version", "1.21") as String

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

String paperPaperVersion = readPluginProperty("paper.paper_version", "1.21.4-R0.1-SNAPSHOT")
String paperServerVersion = readPluginProperty("paper.server_version", "1.21.4")
def targetJavaVersion = readPluginProperty("java.version", 21) as Integer

dependencies {
    compileOnly("io.papermc.paper:paper-api:${paperPaperVersion}")

    compileOnly("org.projectlombok:lombok:1.18.36")
    annotationProcessor("org.projectlombok:lombok:1.18.36")
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

boolean hasEnhancedHotswap = readPluginProperty("java.allow_enhanced_hotswap", true)
if (hasEnhancedHotswap) {
    tasks.withType(AbstractRun.class).configureEach {
        javaLauncher = javaToolchains.launcherFor {
            vendor = JvmVendorSpec.JETBRAINS
            languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
        jvmArgs("-XX:+AllowEnhancedClassRedefinition")
    }
}

tasks {
    runServer {
        minecraftVersion(paperServerVersion)
    }

    jar {
        archiveBaseName.set(pluginName)
        archiveVersion.set(pluginVersion)
    }
}

String modrinthProjectId = readPluginProperty("modrinth.project_id", "paper-plugin-template")
String modrinthVersionNumber = readPluginProperty("modrinth.version_number", "1.0.0")
String modrinthVersionType = readPluginProperty("modrinth.version_type", "release")
String modrinthUploadFile = readPluginProperty("modrinth.upload_file", "jar")
List<String> modrinthGameVersions = readPluginProperty("modrinth.game_versions", ["1.21.4"]) as List<String>
List<String> modrinthLoaders = readPluginProperty("modrinth.loaders", ["paper"]) as List<String>
Map<String, List<Map<String, String>>> modrinthDependencies = readPluginProperty("modrinth.dependencies", [:]) as Map<String, List<Map<String, String>>>

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinthProjectId
    versionNumber = modrinthVersionNumber
    versionType = modrinthVersionType
    uploadFile = modrinthUploadFile
    gameVersions = modrinthGameVersions
    loaders = modrinthLoaders

    addModrinthDependencies(modrinthDependencies, "optional", optional)
    addModrinthDependencies(modrinthDependencies, "required", required)
    addModrinthDependencies(modrinthDependencies, "incompatible", incompatible)
    addModrinthDependencies(modrinthDependencies, "embedded", embedded)
}

processResources {
    def props = [pluginName: pluginName, pluginVersion: pluginVersion, pluginApiVersion: pluginApiVersion]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

def readPluginProperty(String key, def defaultValue = "") {
    def jsonFile = file("plugin.json")

    if (!jsonFile.exists()) return defaultValue

    def json = new JsonSlurper().parse(jsonFile)

    def keys = key.split("\\.")
    def value = keys.inject(json) { acc, k -> acc instanceof Map ? acc[k] : null }

    return value != null ? value : defaultValue
}

static def addModrinthDependencies(dependencies, category, handler) {
    dependencies[category]?.each { dep ->
        if (dep["type"] == "version") {
            handler.version dep["name"], dep["version"]
        } else if (dep["type"] == "project") {
            handler.project dep["name"]
        }
    }
}